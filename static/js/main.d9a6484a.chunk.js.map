{"version":3,"sources":["Components/Nav.js","Components/Hero.js","Components/Quote.js","Components/Recipe.js","Components/SearchBox.js","Components/RecipeList.js","Components/Content.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","href","hero","Quote","props","cite","author","qod","Modal","setAppElement","Recipe","useState","isOpen","setisOpen","foodImg","backgroundImage","pic","width","height","borderRadius","style","content","top","left","right","bottom","marginRight","transform","maxHeight","maxWidth","textAlign","onRequestClose","src","alt","title","ing","map","dients","key","text","onClick","SearchBox","onSubmit","submit","type","placeholder","onChange","change","icon","faSearch","searchRes","Recipelist","recipes","setRecipes","search","setSearch","query","setQuery","isSearch","setisSearch","useEffect","a","fetch","res","json","data","hits","GetRecipe","e","target","value","preventDefault","recipe","label","ingredients","image","desc","source","RecipeList","Footer","getDate","Date","getFullYear","App","state","quotes","searchfield","random","setState","GetQuote","quo","this","Hero","Content","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d9a6484a.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/nav.css';\r\n\r\nconst Nav = () => {\r\n    return(\r\n        <div>\r\n            <nav>\r\n                <ul className='navigation'>\r\n                    <li className='logo'><a href='index.js'>Foodster</a></li>\r\n                    <li><a href='https://github.com/chadgotis'>Git</a></li>\r\n                    <li><a href='index.js'>About</a></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\nexport default Nav;","import React from 'react';\r\nimport '../css/hero.css';\r\n\r\nconst hero = () => {\r\n    return(\r\n        <div className='hero'>\r\n            <div className='quote'>\r\n            <h1>Cooking is an expression that \r\n            crosses boundaries.</h1>\r\n            <p>-Foodster</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default hero;","import React from 'react';\r\nimport '../css/quote.css';\r\n\r\n\r\n\r\nconst Quote = (props) => {\r\n\r\n    return(\r\n        <div className='quoteBody'>\r\n            <h3>Quote of The day</h3>\r\n            <blockquote cite={props.author} >\"{props.qod}\"</blockquote>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Quote;","import React, { useState } from 'react';\r\nimport '../css/recipe.css';\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root');\r\n\r\nconst Recipe = (props) => {\r\n\r\n    const [isOpen,setisOpen] = useState(false);\r\n\r\n    const foodImg = {\r\n        backgroundImage: `url(${props.pic})`,\r\n        width:'250px',\r\n        height:'150px',\r\n        borderRadius:'12px'\r\n    }\r\n    return(\r\n        <div>\r\n            <Modal \r\n                style={{\r\n                    content : {\r\n                        top                   : '50%',\r\n                        left                  : '50%',\r\n                        right                 : 'auto',\r\n                        bottom                : 'auto',\r\n                        marginRight           : '-50%',\r\n                        transform             : 'translate(-50%, -50%)',\r\n                        maxHeight             : '500px',\r\n                        maxWidth              : '700px',\r\n                        textAlign             : 'center'\r\n                      }\r\n\r\n                }}\r\n                isOpen={isOpen} onRequestClose={() => setisOpen(false)}>\r\n                <ul className=\"ingredients\">\r\n                    <img src={props.pic} alt={props.pic}/>\r\n                    <h2>{props.title}</h2>\r\n                    {props.ing.map(dients => (\r\n                        <li key={dients.text}>{dients.text}</li>\r\n                    ))}\r\n                </ul>\r\n            </Modal>\r\n            <div className=\"recipe\" onClick={() => setisOpen(true)}>\r\n                <div className='foodstyle' style={foodImg}></div>\r\n                <h2>{props.title}</h2>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recipe;","import React from 'react';\r\nimport '../css/searchbox.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst SearchBox = (props) => {\r\n    return(\r\n        <div className=\"search\"> \r\n            <form onSubmit={props.submit}>  \r\n                <input className='searchbar' type=\"search\" placeholder='Search recipe...' onChange={props.change}/>\r\n                <button className='searchbtn' type=\"button\"><FontAwesomeIcon icon={faSearch}/></button>\r\n            </form> \r\n     {props.searchRes===\"steak\" ? '' : (<h2>Search Result for: {props.searchRes}</h2>)} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React, { useEffect, useState} from 'react';\r\nimport '../css/recipelist.css';\r\n// import SearchBox from './Searchbox.js';\r\nimport Recipe from './Recipe';\r\nimport SearchBox from './SearchBox';\r\n\r\nconst Recipelist = (props) => {\r\n\r\n    const [recipes, setRecipes] = useState([]);\r\n    const [search, setSearch] = useState('');\r\n    const [query, setQuery] = useState('steak');\r\n    const [isSearch, setisSearch] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const GetRecipe = async () => {\r\n            const APP_ID = \"3834705e\";\r\n            const APP_KEY = \"c23e9514f82c2440abf54b21edd4c3dc\";\r\n            const res = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\r\n            const data = await res.json();\r\n            setRecipes(data.hits);\r\n          }\r\n        GetRecipe();\r\n        const searchResultHandle = () => {\r\n            setisSearch(query);\r\n        }\r\n        searchResultHandle();\r\n    },[query])\r\n\r\n    const updateSearch = e => {\r\n        setSearch(e.target.value);\r\n      };\r\n    \r\n      const getSearch = e => {\r\n        e.preventDefault();\r\n        setQuery(search);\r\n        setSearch('');\r\n      };\r\n\r\n    return(\r\n        <div className='recipelist'>\r\n            <SearchBox searchRes= {isSearch} change={updateSearch} submit={getSearch}/>\r\n            <div className=\"rec\">\r\n                {recipes.map(recipe => (\r\n                    <div>\r\n                    <Recipe key={recipe.recipe.label} ing={recipe.recipe.ingredients} title={recipe.recipe.label} pic={recipe.recipe.image} desc={recipe.recipe.source}/>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recipelist;","import React from 'react';\r\nimport Quote from './Quote';\r\nimport RecipeList from './RecipeList';\r\nimport '../css/content.css';\r\n\r\n\r\nconst content = (props) => {\r\n    // let k = 1;\r\n    return(\r\n        <div>\r\n            <main>\r\n                <div className='dayquote'>\r\n                    <Quote qod={props.qod} author={props.author}/>\r\n                </div>\r\n                <div className='recipelist'>\r\n                    <RecipeList recipe={props.recipe} />\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default content;","import React from 'react';\r\nimport '../css/footer.css';\r\n\r\nconst Footer = () => {\r\n    const date = new Date();\r\n    const getDate = date.getFullYear();\r\n    return(\r\n        <div>\r\n            <footer>\r\n                Copyright {getDate}\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, {Component} from 'react';\nimport Nav from './Components/Nav';\nimport Hero from './Components/Hero';\nimport Content from './Components/Content';\nimport Footer from './Components/Footer';\n// import {quote} from './Components/List';\n// import {foodlist} from './Components/foodlist';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      quotes: [],\n      searchfield: '',\n      recipes: [],\n      random:0\n    }\n  }\n\n  componentDidMount(){\n    const GetQuote = async () => {\n      const res = await fetch('https://api.quotable.io/random');\n      const data = await res.json();\n      this.setState({quotes: data});\n    }\n    GetQuote();\n  }\n\n  render() {\n    const quo = this.state.quotes;\n    return(\n      <div>\n        <Nav/>\n        <Hero />\n          <Content qod={quo.content} author={quo.author}/>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}